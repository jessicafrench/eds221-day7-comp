---
title: "Joins and Strings and Dates, oh my!"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)

```

## Joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
             "lagoon",   "bobcat",    "adult",
              "bluff",   "coyote", "juvenile",
              "creek",      "fox",    "adult",
               "oaks", "squirrel", "juvenile",
              "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### full join

```{r}
full_join_ex <- full_join(animals, sites)
```

### left join

```{r}
left_join_ex <- left_join(animals, sites)
```

### inner join

```{r}
inner_join_ex <- inner_join(animals, sites, by = "location")
```

```{r}
sites_2 <- sites |> 
  rename(loc = location)
```

examples of when key variable names do not match

```{r}
nonmatching_full <- full_join(animals, sites_2, by = c("location" = "loc"))
```

## All of the above are mutating joins.

-   below are the filtering joins

### semi join

```{r}
semi_join_ex <- semi_join(animals, sites)
```

### anti join

```{r}
anti_join_ex <- anti_join(animals, sites)
```

## Start of days tasks

```{r}
part_1_1 <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(-"year", -"sex") |> 
  mutate(body_mass_kg = body_mass_g / 1000) |> 
  rename(location = island)

part_1_2 <- penguins |> 
  filter(species == "Adelie") |> 
  filter(!is.na(flipper_length_mm)) |> 
  group_by(sex) |> 
  summarize(mean_flipper_length = mean(flipper_length_mm), sd_flipper_length = sd(flipper_length_mm), sample_size = n())
```

Afternoon computational session
- dates and times with `lubridate`

```{r}
my_date <- "03-15-1998" #r does not recognize this as a date

lubridate::mdy(my_date)

my_date <- "11/7/2003"
lubridate::dmy(my_date)

my_date <- "08-jun-1974"
lubridate::dmy(my_date)

my_date <- "19610518"
lubridate::ymd(my_date)

#tidyverts for time series analysis

```
```{r}
#ways to break, if the date given does not match the function chosen

lubridate::ymd("1942-08-30")


```

```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)
time
class(time)
```

```{r}
#convert time zones using lubridate

with_tz(time, "America/Los_Angeles")
with_tz(time, "Poland")
with_tz(time, "Pacific/Palau")

#Pulling the different pieces (parsing) time data
my_time <- ymd_hms(time)

year(my_time)
day(my_time)
```

```{r}
thistle_bday <- ymd(20171208)
thistle_bday

wday(thistle_bday, label = TRUE)
week(thistle_bday)

my_bday <- mdy(02061991)
wday(my_bday, label = TRUE)
```

```{r}
#The data

urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55, 
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)
```

```{r}
urching_mdy <- urchin_counts |> 
  mutate(date = mdy(date)) |> 
  mutate(year = year(date), month = month(date), day = day(date))

```

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)
time_length(time_interval, "month")
```

## String Work 
### `str_detect`

```{r}
my_string <- "Thistle love treats, the beach, and naptime."

my_string |> 
  str_detect("love")

my_other_string <- c("treats", "burrito", "fish taco", "taco salad")

my_other_string |> 
  str_detect("fish")

```

```{r}
#Pull out all of the character that have skywalker in their name

skywalkers <- starwars |> 
  filter(str_detect(name, pattern = "Skywalker"))

maul <- starwars |> 
  filter(str_detect(name, pattern = "Maul"))

blue_eyes <- starwars |> 
  filter(str_detect(eye_color, pattern = "blue"))
```

```{r}
feedback <- c("  I  ate    some  nachos", "Wednesday   morning ")

str_trim(feedback)
str_squish(feedback)

#str_to*

str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)

starwars_lc <- starwars |> 
  mutate(name_lower = str_to_lower(name))
```

### `case_when()`

```{r}
starwars_robot <- starwars |> 
  mutate(rabot_status = case_when(
    species == "Droid" ~ "A ROBOT",
    species == "Human" ~ "Its a human", 
    TRUE ~ "This is something else"
  ))
```


## string replace to replace string patterns 
```{r}
sky_to_fire <- starwars |> 
  mutate(new_name = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

